'''
你的面前有一堵矩形的、由 n 行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和相等。
你现在要画一条 自顶向下 的、穿过 最少 砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。
给你一个二维数组 wall ，该数组包含这堵墙的相关信息。其中，wall[i] 是一个代表从左至右每块砖的宽度的数组。你需要找出怎样画才能使这条线 穿过的砖块数量最少 ，并且返回 穿过的砖块数量 。

输入：wall = [[1,2,2,1],
             [3,1,2],
             [1,3,2],
             [2,4],
             [3,1,2],
             [1,3,1,1]]
输出：2

输入：wall = [[1],
             [1],
             [1]]
输出：3
'''
from typing import List


# 题目要求穿过的砖块数量最少，等效于通过的间隙最多。
#
# 我们可以使用「哈希表」记录每个间隙的出现次数，最终统计所有行中哪些间隙出现得最多，使用「总行数」减去「间隙出现的最多次数」即是答案。


def leastBricks(wall: List[List[int]]) -> int:
    d = {}
    for item in wall:
        sum = 0
        for i in item:
            sum += i
            if sum in d:
                d[sum] += 1
            else:
                d[sum] = 1
        d.pop(sum)

    m = 0
    for item in d.values():
        m = max(m, item)
    return len(wall) - m


if __name__ == '__main__':
    print(leastBricks(wall=[[1, 2, 2, 1],
                            [3, 1, 2],
                            [1, 3, 2],
                            [2, 4],
                            [3, 1, 2],
                            [1, 3, 1, 1]]))
